package model

import (
	. "go-orm/db"
{{ range $i, $m := .Imports }}
	"{{$m}}"
{{- end }}
)

type {{.Model}}Model struct {
	Datasource string
	Table      string
	ID         int64
{{ range $i, $k := .Attrs }}
	{{$k}} {{index $.Values $i}}
{{- end }}
}

func (m *{{.Model}}Model) Exec(sql string) error {
	db := DBPool[m.Datasource]["w"]
	if _, err := db.Exec(sql); err != nil {
		fmt.Println("Execute sql failed:", err)
		return err
	}
	return nil
}

func (m *{{.Model}}Model) CreateTable() error {
	sql := `CREATE TABLE {{.Table}} (
		id BIGINT AUTO_INCREMENT,
{{ range $i, $k := .Keys }}
		{{$k}} {{index $.Columns $i}},
{{- end }}
		PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`
	db := DBPool[m.Datasource]["w"]
	if _, err := db.Exec(sql); err != nil {
		fmt.Println("Create table failed:", err)
		return err
	}
	return nil
}

func (m *{{.Model}}Model) New() *{{.Model}}Model {
	n := {{.Model}}Model{Datasource: "default", Table: "{{.Table}}"}
	return &n
}

func (m *{{.Model}}Model) Find(id int64) (*{{.Model}}Model, error) {
	sql := "SELECT * FROM {{.Table}} WHERE id = ?"
	db := DBPool[m.Datasource]["r"]
	row := db.QueryRow(sql, id)
	if err := row.Scan(&m.ID, &m.Name); err != nil {
		fmt.Printf("Scan failed, err:%v\n", err)
		return nil, err
	}
	return m, nil
}

func (m *{{.Model}}Model) Save() (*{{.Model}}Model, error) {
	if m.ID > 0 {
		fmt.Println("--Update")
	} else {
		fmt.Println("--Save")
	}
	return m, nil
}

func (m *{{.Model}}Model) Where(conds map[string]interface{}) []*{{.Model}}Model {
	// todo
	ms := []*{{.Model}}Model{}
	return ms
}

func (m *{{.Model}}Model) Create(props map[string]interface{}) (*{{.Model}}Model, error) {
	// todo
	return m, nil
}

func (m *{{.Model}}Model) Delete() error {
	// todo
	return nil
}

func (m *{{.Model}}Model) Destroy(id int64) error {
	// sql := "DELETE FROM {{.Table}} WHERE id = ?"
	// todo
	return nil
}

func (m *{{.Model}}Model) Update(props map[string]interface{}, conds map[string]interface{}) error {
	// todo
	return nil
}

var {{.Model}} = {{.Model}}Model{Datasource: "default", Table: "{{.Table}}"}