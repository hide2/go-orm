package model

import (
{{ range $i, $m := .Imports }}
	"{{$m}}"
{{ end -}}
)

type {{.Model}}Model struct {
	datasource string
	table      string
{{ range $i, $k := .Keys }}
	{{$k}} {{index $.Values $i}}
{{ end }}
}

func (m *{{.Model}}Model) CreateTable() {
	sql := `CREATE TABLE {{.Table}} (
		id BIGINT AUTO_INCREMENT,
{{ range $i, $k := .Keys }}
		{{$k}} {{index $.Columns $i}},
{{ end }}
  PRIMARY KEY (id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`
	fmt.Println(sql)
	// todo
}

func (m *{{.Model}}Model) New() *{{.Model}}Model {
	// todo
	return m
}

func (m *{{.Model}}Model) Find(id int64) (*{{.Model}}Model, error) {
	sql := "SELECT * FROM {{.Table}} WHERE id = ?"
	fmt.Println(sql)
	return m, nil
}

func (m *{{.Model}}Model) Where(conds map[string]interface{}) []*{{.Model}}Model {
	// todo
	ms := []*{{.Model}}Model{}
	return ms
}

func (m *{{.Model}}Model) Save() (*{{.Model}}Model, error) {
	// todo
	return m, nil
}

func (m *{{.Model}}Model) Create(props map[string]interface{}) (*{{.Model}}Model, error) {
	// todo
	return m, nil
}

func (m *{{.Model}}Model) Delete() error {
	// todo
	return nil
}

func (m *{{.Model}}Model) Destroy(id int64) error {
	// sql := "DELETE FROM {{.Table}} WHERE id = ?"
	// todo
	return nil
}

func (m *{{.Model}}Model) Update(props map[string]interface{}, conds map[string]interface{}) error {
	// todo
	return nil
}

var {{.Model}} = {{.Model}}Model{datasource: "default", table: "{{.Table}}"}